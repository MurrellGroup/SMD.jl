{
    "docs": [
        {
            "location": "/", 
            "text": "SMD.jl Documentation\n\n\nSMD.jl\n is a package...\n\n\n\n\n\n\nSMD Functions\n\n\n\n\n\n\nSMD.dist_matrix\n\n\n\n\nSMD.dist_matrix_mt\n\n\nSMD.fst_wrapper\n\n\nSMD.permutation_test\n\n\nSMD.smd_distance_wrapper\n\n\nSMD.smd_mf\n\n\nSMD.smd_sum\n\n\nSMD.symmetric_dist_matrix\n\n\nSMD.symmetric_dist_matrix_mt", 
            "title": "Home"
        }, 
        {
            "location": "/#smdjl-documentation", 
            "text": "SMD.jl  is a package...    SMD Functions    SMD.dist_matrix   SMD.dist_matrix_mt  SMD.fst_wrapper  SMD.permutation_test  SMD.smd_distance_wrapper  SMD.smd_mf  SMD.smd_sum  SMD.symmetric_dist_matrix  SMD.symmetric_dist_matrix_mt", 
            "title": "SMD.jl Documentation"
        }, 
        {
            "location": "/smdfuncs/", 
            "text": "SMD Functions\n\n\n\n\nSMD.dist_matrix\n\n\nSMD.dist_matrix_mt\n\n\nSMD.fst_wrapper\n\n\nSMD.permutation_test\n\n\nSMD.smd_distance_wrapper\n\n\nSMD.smd_mf\n\n\nSMD.smd_sum\n\n\nSMD.symmetric_dist_matrix\n\n\nSMD.symmetric_dist_matrix_mt\n\n\n\n\n#\n\n\nSMD.dist_matrix\n \n \nFunction\n.\n\n\ndist_matrix(distr1, distr2; dist_met = kmer_seeded_edit_dist)\n\n\n\n\ndistances[i, j] is distance from distr1[i] to distr2[j]\n\n\nsource\n\n\n#\n\n\nSMD.dist_matrix_mt\n \n \nFunction\n.\n\n\ndist_matrix_mt(distr1, distr2; dist_met = kmer_seeded_edit_dist)\n\n\n\n\ndist_matrix but multithreaded instead\n\n\nsource\n\n\n#\n\n\nSMD.symmetric_dist_matrix\n \n \nFunction\n.\n\n\nsymmetric_dist_matrix(distr; dist_met = kmer_seeded_edit_dist)\n\n\n\n\nsimilar to dist_matrix but where distr1 == distr2. Automatically called by dist_matrix\n\n\nsource\n\n\n#\n\n\nSMD.symmetric_dist_matrix_mt\n \n \nFunction\n.\n\n\nsymmetric_dist_matrix_mt(distr; dist_met = kmer_seeded_edit_dist)\n\n\nsimilar to dist_matrix_mt but where distr1 == distr2. Automatically called by dist_matrix_mt\n\n\nsource\n\n\n#\n\n\nSMD.smd_mf\n \n \nFunction\n.\n\n\nsmd_mf(distances_matrix::Array{Float64,2};                 freq1::Vector{Float64}=Float64[],                 freq2::Vector{Float64}=Float64[],                 unbounded_first::Bool=false,                 unbounded_second::Bool=false)\n\n\nMutation distance from one population to another\n\n\nsource\n\n\n#\n\n\nSMD.smd_sum\n \n \nFunction\n.\n\n\nsmd_sum(distances_matrix::Array{Float64,2};                 freq1::Vector{Float64}=Float64[],                 freq2::Vector{Float64}=Float64[])\n\n\nsource\n\n\n#\n\n\nSMD.smd_distance_wrapper\n \n \nFunction\n.\n\n\nsmd_distance_wrapper(distmat::Array{Float64,2}, inds1, inds2)\n\n\nWrapper for the smd_mf call\n\n\nsource\n\n\n#\n\n\nSMD.fst_wrapper\n \n \nFunction\n.\n\n\nfst_wrapper(distmat, inds1, inds2)\n\n\nWrapper function\n\n\nsource\n\n\n#\n\n\nSMD.permutation_test\n \n \nFunction\n.\n\n\npermutation_test(distmat::Array{Float64,2}; l1 = nothing, l2 = nothing, tests=10000, dist_func = smd_distance_wrapper, randvariation=true)\n\n\nsource", 
            "title": "smdfuncs"
        }, 
        {
            "location": "/smdfuncs/#smd-functions", 
            "text": "SMD.dist_matrix  SMD.dist_matrix_mt  SMD.fst_wrapper  SMD.permutation_test  SMD.smd_distance_wrapper  SMD.smd_mf  SMD.smd_sum  SMD.symmetric_dist_matrix  SMD.symmetric_dist_matrix_mt   #  SMD.dist_matrix     Function .  dist_matrix(distr1, distr2; dist_met = kmer_seeded_edit_dist)  distances[i, j] is distance from distr1[i] to distr2[j]  source  #  SMD.dist_matrix_mt     Function .  dist_matrix_mt(distr1, distr2; dist_met = kmer_seeded_edit_dist)  dist_matrix but multithreaded instead  source  #  SMD.symmetric_dist_matrix     Function .  symmetric_dist_matrix(distr; dist_met = kmer_seeded_edit_dist)  similar to dist_matrix but where distr1 == distr2. Automatically called by dist_matrix  source  #  SMD.symmetric_dist_matrix_mt     Function .  symmetric_dist_matrix_mt(distr; dist_met = kmer_seeded_edit_dist)  similar to dist_matrix_mt but where distr1 == distr2. Automatically called by dist_matrix_mt  source  #  SMD.smd_mf     Function .  smd_mf(distances_matrix::Array{Float64,2};                 freq1::Vector{Float64}=Float64[],                 freq2::Vector{Float64}=Float64[],                 unbounded_first::Bool=false,                 unbounded_second::Bool=false)  Mutation distance from one population to another  source  #  SMD.smd_sum     Function .  smd_sum(distances_matrix::Array{Float64,2};                 freq1::Vector{Float64}=Float64[],                 freq2::Vector{Float64}=Float64[])  source  #  SMD.smd_distance_wrapper     Function .  smd_distance_wrapper(distmat::Array{Float64,2}, inds1, inds2)  Wrapper for the smd_mf call  source  #  SMD.fst_wrapper     Function .  fst_wrapper(distmat, inds1, inds2)  Wrapper function  source  #  SMD.permutation_test     Function .  permutation_test(distmat::Array{Float64,2}; l1 = nothing, l2 = nothing, tests=10000, dist_func = smd_distance_wrapper, randvariation=true)  source", 
            "title": "SMD Functions"
        }
    ]
}